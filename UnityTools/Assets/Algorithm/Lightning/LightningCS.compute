// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
//#pragma kernel Lap
#pragma kernel JacobiStep
#pragma kernel WeightSum
#pragma kernel SetBoundary
#pragma kernel UpdateDartLeader
#pragma kernel InitDartLeaderChargeDensity
#pragma kernel InitDart

#define PI 3.141592653f


Texture2D<float2> _PotentialBoundaryInput;//R is high potential; G is low potential
Texture2D<float4> _DisplayTex;

RWTexture2D<float> _Potential;
RWTexture2D<float> _PotentialBoundary;
RWTexture2D<float> _PotentialOutput;
RWTexture2D<float> _DartLeaderTex;
Texture2D<float> _ObstacleTex;

RWBuffer<float> _AdjacentWeight;

cbuffer Constant
{
    float4 _TextureSize;
    float4 _TargetPixel;
    float _ChargeDensity;
};

[numthreads(8,8,1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    bool isHigh = _PotentialBoundaryInput[id.xy].r > 0;
    bool isLow  = _PotentialBoundaryInput[id.xy].g > 0;
    float val = isHigh ? 1 : isLow ? 0 : -1;
    _Potential[id.xy] = val;
    _PotentialBoundary[id.xy] = val;
}

[numthreads(8, 8, 1)]
void InitDart(uint3 id : SV_DispatchThreadID)
{

    _DartLeaderTex[id.xy] = 0;
}


/*[numthreads(8, 8, 1)]
void Lap(uint3 id : SV_DispatchThreadID)
{
    uint4 _SizeOffset = uint4(1, 0, 0, 1);

    float result = -_Potential[id.xy] * 4
        + _Potential[id.xy + _SizeOffset.xy]
        + _Potential[id.xy - _SizeOffset.xy]
        + _Potential[id.xy + _SizeOffset.zw]
        + _Potential[id.xy - _SizeOffset.zw];

    _PotentialLap[id.xy] = _Potential[id.xy] >= 0 ? result : 0;
}*/

float GetValue(int2 id)
{
    if (id.x < 0 || id.y < 0 || id.x >= _TextureSize.x || id.y >= _TextureSize.y)
    {
        return 0;
    }

    if (_PotentialBoundary[id.xy].r >= 0) return 0;
    if (_ObstacleTex[id] > 0) return 0;

    return _Potential[id];
}

float GetBoundary(int2 id)
{
    if (id.x < 0 || id.y < 0 || id.x >= _TextureSize.x || id.y >= _TextureSize.y)
    {
        return 0;
    }

    if (_ObstacleTex[id] > 0) return 0;

    return saturate(_PotentialBoundary[id]);
}


bool IsBoundaryAdj(int2 id)
{
    if (id.x < 0 || id.y < 0 || id.x >= _TextureSize.x || id.y >= _TextureSize.y)
    {
        return false;
    }

    if (_ObstacleTex[id] > 0) return false;

    return _PotentialBoundary[id.xy] == 0;
}

[numthreads(8, 8, 1)]
void JacobiStep(uint3 id : SV_DispatchThreadID)
{
    uint4 _SizeOffset = uint4(1, 0, 0, 1);

    float bx = -(GetBoundary(id.xy + _SizeOffset.xy)
                +GetBoundary(id.xy - _SizeOffset.xy)
                +GetBoundary(id.xy + _SizeOffset.zw)
                +GetBoundary(id.xy - _SizeOffset.zw));
    float D_1 = -1 / 4.0;//D-1

    //Rx(k)
    float Rx = GetValue(id.xy + _SizeOffset.xy)
             + GetValue(id.xy - _SizeOffset.xy)
             + GetValue(id.xy + _SizeOffset.zw)
             + GetValue(id.xy - _SizeOffset.zw);

    _PotentialOutput[id.xy] = D_1 * (bx - Rx);
}


[numthreads(8, 8, 1)]
void WeightSum(uint3 id : SV_DispatchThreadID)
{
    uint4 _SizeOffset = uint4(1, 0, 0, 1);
    int idx = id.x + id.y * _TextureSize.x;
    bool isAdj = IsBoundaryAdj(id.xy + _SizeOffset.xy)
                || IsBoundaryAdj(id.xy - _SizeOffset.xy)
                || IsBoundaryAdj(id.xy + _SizeOffset.zw)
                || IsBoundaryAdj(id.xy - _SizeOffset.zw)

                //|| IsBoundaryAdj(id.xy + _SizeOffset.xx)
                //|| IsBoundaryAdj(id.xy - _SizeOffset.xx)
                //|| IsBoundaryAdj(id.xy + uint2(-1, 1))
                //|| IsBoundaryAdj(id.xy + uint2(1, -1))
                ;

    _AdjacentWeight[idx] = isAdj?_PotentialOutput[id.xy]:0;
}

[numthreads(8, 8, 1)]
void SetBoundary(uint3 id : SV_DispatchThreadID)
{
    if (id.x == _TargetPixel.x && id.y == _TargetPixel.y)
    {
        _PotentialBoundary[id.xy] = 0;
    }
}
[numthreads(8, 8, 1)]
void InitDartLeaderChargeDensity(uint3 id : SV_DispatchThreadID)
{
    if (_DisplayTex[id.xy].r > 0)
    {
        _DartLeaderTex[id.xy] = _ChargeDensity;
    }
    else
    {
        _DartLeaderTex[id.xy] = 0;
    }
}


[numthreads(8, 8, 1)]
void UpdateDartLeader(uint3 id : SV_DispatchThreadID)
{
    uint4 _SizeOffset = uint4(1, 0, 0, 1);

    float bx = -4 * PI * _DartLeaderTex[id.xy] -(GetBoundary(id.xy + _SizeOffset.xy)
        + GetBoundary(id.xy - _SizeOffset.xy)
        + GetBoundary(id.xy + _SizeOffset.zw)
        + GetBoundary(id.xy - _SizeOffset.zw));
    float D_1 = -1 / 4.0;//D-1

    //Rx(k)
    float Rx = GetValue(id.xy + _SizeOffset.xy)
        + GetValue(id.xy - _SizeOffset.xy)
        + GetValue(id.xy + _SizeOffset.zw)
        + GetValue(id.xy - _SizeOffset.zw);

    _PotentialOutput[id.xy] = D_1 * (bx - Rx);
}